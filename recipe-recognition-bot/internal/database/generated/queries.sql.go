// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO recipe_bot.users (
    telegram_id,
    telegram_username,
    first_name,
    last_name
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, telegram_id, telegram_username, first_name, last_name, created_at, updated_at
`

type CreateUserParams struct {
	TelegramID       int64       `db:"telegram_id" json:"telegramId"`
	TelegramUsername pgtype.Text `db:"telegram_username" json:"telegramUsername"`
	FirstName        pgtype.Text `db:"first_name" json:"firstName"`
	LastName         pgtype.Text `db:"last_name" json:"lastName"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (RecipeBotUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.TelegramID,
		arg.TelegramUsername,
		arg.FirstName,
		arg.LastName,
	)
	var i RecipeBotUser
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.TelegramUsername,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipe_bot.recipes
WHERE id = $1 AND user_id = $2
`

type DeleteRecipeParams struct {
	ID     int32 `db:"id" json:"id"`
	UserID int32 `db:"user_id" json:"userId"`
}

func (q *Queries) DeleteRecipe(ctx context.Context, arg DeleteRecipeParams) error {
	_, err := q.db.Exec(ctx, deleteRecipe, arg.ID, arg.UserID)
	return err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, user_id, recipe_title, recipe_content, ingredients, created_at FROM recipe_bot.recipes
WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetRecipeParams struct {
	ID     int32 `db:"id" json:"id"`
	UserID int32 `db:"user_id" json:"userId"`
}

func (q *Queries) GetRecipe(ctx context.Context, arg GetRecipeParams) (RecipeBotRecipe, error) {
	row := q.db.QueryRow(ctx, getRecipe, arg.ID, arg.UserID)
	var i RecipeBotRecipe
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RecipeTitle,
		&i.RecipeContent,
		&i.Ingredients,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByTelegramID = `-- name: GetUserByTelegramID :one
SELECT id, telegram_id, telegram_username, first_name, last_name, created_at, updated_at FROM recipe_bot.users
WHERE telegram_id = $1 LIMIT 1
`

func (q *Queries) GetUserByTelegramID(ctx context.Context, telegramID int64) (RecipeBotUser, error) {
	row := q.db.QueryRow(ctx, getUserByTelegramID, telegramID)
	var i RecipeBotUser
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.TelegramUsername,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserRecipes = `-- name: ListUserRecipes :many
SELECT id, user_id, recipe_title, recipe_content, ingredients, created_at FROM recipe_bot.recipes
WHERE user_id = $1
ORDER BY created_at DESC
    LIMIT $2
`

type ListUserRecipesParams struct {
	UserID int32 `db:"user_id" json:"userId"`
	Limit  int32 `db:"limit" json:"limit"`
}

func (q *Queries) ListUserRecipes(ctx context.Context, arg ListUserRecipesParams) ([]RecipeBotRecipe, error) {
	rows, err := q.db.Query(ctx, listUserRecipes, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RecipeBotRecipe{}
	for rows.Next() {
		var i RecipeBotRecipe
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RecipeTitle,
			&i.RecipeContent,
			&i.Ingredients,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveRecipe = `-- name: SaveRecipe :one
INSERT INTO recipe_bot.recipes (
    user_id,
    recipe_title,
    recipe_content,
    ingredients
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, user_id, recipe_title, recipe_content, ingredients, created_at
`

type SaveRecipeParams struct {
	UserID        int32  `db:"user_id" json:"userId"`
	RecipeTitle   string `db:"recipe_title" json:"recipeTitle"`
	RecipeContent string `db:"recipe_content" json:"recipeContent"`
	Ingredients   []byte `db:"ingredients" json:"ingredients"`
}

func (q *Queries) SaveRecipe(ctx context.Context, arg SaveRecipeParams) (RecipeBotRecipe, error) {
	row := q.db.QueryRow(ctx, saveRecipe,
		arg.UserID,
		arg.RecipeTitle,
		arg.RecipeContent,
		arg.Ingredients,
	)
	var i RecipeBotRecipe
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RecipeTitle,
		&i.RecipeContent,
		&i.Ingredients,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE recipe_bot.users
SET
    telegram_username = $2,
    first_name = $3,
    last_name = $4,
    updated_at = NOW()
WHERE telegram_id = $1
    RETURNING id, telegram_id, telegram_username, first_name, last_name, created_at, updated_at
`

type UpdateUserParams struct {
	TelegramID       int64       `db:"telegram_id" json:"telegramId"`
	TelegramUsername pgtype.Text `db:"telegram_username" json:"telegramUsername"`
	FirstName        pgtype.Text `db:"first_name" json:"firstName"`
	LastName         pgtype.Text `db:"last_name" json:"lastName"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (RecipeBotUser, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.TelegramID,
		arg.TelegramUsername,
		arg.FirstName,
		arg.LastName,
	)
	var i RecipeBotUser
	err := row.Scan(
		&i.ID,
		&i.TelegramID,
		&i.TelegramUsername,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
