package recipes

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/sashabaranov/go-openai"
	"go.uber.org/zap"
)

type RecipeGenerator struct {
	client *openai.Client
	logger *zap.Logger
}

type Recipe struct {
	Title        string   `json:"title"`
	Ingredients  []string `json:"ingredients"`
	Instructions string   `json:"instructions"`
}

func NewRecipeGenerator(apiKey string, logger *zap.Logger) *RecipeGenerator {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è OpenRouter –≤–º–µ—Å—Ç–æ OpenAI
	config := openai.DefaultConfig(apiKey)
	config.BaseURL = "https://openrouter.ai/api/v1"
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
	if apiKey == "" {
		logger.Error("API –∫–ª—é—á OpenRouter –ø—É—Å—Ç–æ–π")
		// –í–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –∑–¥–µ—Å—å
	}
	return &RecipeGenerator{
		client: openai.NewClientWithConfig(config),
		logger: logger,
	}
}

func (g *RecipeGenerator) GenerateRecipe(ctx context.Context, products []string) (*Recipe, error) {
	productsList := strings.Join(products, ", ")
	g.logger.Info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞", zap.Strings("–ø—Ä–æ–¥—É–∫—Ç—ã", products))

	prompt := fmt.Sprintf(`–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: %s

–¢—ã - –ø–æ–≤–∞—Ä!
–ó–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - —Å—Ç—Ä–æ–≥–æ JSON (–¥–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞):
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
  "ingredients": ["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1 —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2 —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º", "..."],
  "instructions": "–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é"
}

–í–∞–∂–Ω–æ: –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!`, productsList)

	g.logger.Debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter", zap.String("prompt", prompt))

	resp, err := g.client.CreateChatCompletion(
		ctx,
		openai.ChatCompletionRequest{
			Model: "deepseek/deepseek-chat:free",
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –∫—É–ª–∏–Ω–∞—Ä–∏–∏. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: prompt,
				},
			},
			MaxTokens: 1000,
		},
	)

	if err != nil {
		g.logger.Error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter", zap.Error(err))
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ API: %w", err)
	}

	content := resp.Choices[0].Message.Content
	g.logger.Debug("–û—Ç–≤–µ—Ç –æ—Ç OpenRouter", zap.String("content", content))

	jsonStart := strings.Index(content, "{")
	jsonEnd := strings.LastIndex(content, "}")

	if jsonStart == -1 || jsonEnd == -1 || jsonEnd <= jsonStart {
		g.logger.Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ",
			zap.Int("jsonStart", jsonStart),
			zap.Int("jsonEnd", jsonEnd),
			zap.String("content", content))
		return nil, fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: JSON –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	jsonContent := content[jsonStart : jsonEnd+1]
	g.logger.Debug("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON", zap.String("json", jsonContent))

	var recipe Recipe
	if err := json.Unmarshal([]byte(jsonContent), &recipe); err != nil {
		g.logger.Error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", zap.Error(err), zap.String("json", jsonContent))
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	if recipe.Title == "" || len(recipe.Ingredients) == 0 || recipe.Instructions == "" {
		g.logger.Error("–ù–µ–ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", zap.Any("recipe", recipe))
		return nil, fmt.Errorf("–Ω–µ–ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –æ—Ç API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
	}

	g.logger.Info("–†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", zap.String("title", recipe.Title))
	return &recipe, nil
}

func (g *RecipeGenerator) FormatRecipe(recipe *Recipe) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("üç≥ *%s*\n\n", recipe.Title))

	sb.WriteString("*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n")
	for i, ingredient := range recipe.Ingredients {
		sb.WriteString(fmt.Sprintf("%d. %s\n", i+1, ingredient))
	}

	sb.WriteString("\n*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*\n")
	sb.WriteString(recipe.Instructions)

	return sb.String()
}
