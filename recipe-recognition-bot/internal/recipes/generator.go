package recipes

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/sashabaranov/go-openai"
	"go.uber.org/zap"
)

// RecipeGenerator –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
type RecipeGenerator struct {
	client *openai.Client
	logger *zap.Logger
}

// Recipe —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
type Recipe struct {
	Title        string   `json:"title"`
	Ingredients  []string `json:"ingredients"`
	Instructions string   `json:"instructions"`
}

// NewRecipeGenerator —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RecipeGenerator
func NewRecipeGenerator(apiKey string, logger *zap.Logger) *RecipeGenerator {
	client := openai.NewClient(apiKey)
	return &RecipeGenerator{
		client: client,
		logger: logger,
	}
}

// GenerateRecipe –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
func (g *RecipeGenerator) GenerateRecipe(ctx context.Context, products []string) (*Recipe, error) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	productsList := strings.Join(products, ", ")

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞
	prompt := fmt.Sprintf(`–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø—Ä–∏–¥—É–º–∞–π —Ä–µ—Ü–µ–ø—Ç.
–ü—Ä–æ–¥—É–∫—Ç—ã: %s.

–£—á—Ç–∏, —á—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞, –∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.
–í–µ—Ä–Ω–∏ —Ä–µ—Ü–µ–ø—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞",
  "ingredients": ["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2", ...],
  "instructions": "–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é"
}

–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ JSON.`, productsList)

	resp, err := g.client.CreateChatCompletion(
		ctx,
		openai.ChatCompletionRequest{
			Model: openai.GPT4,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: prompt,
				},
			},
			MaxTokens: 1000,
		},
	)

	if err != nil {
		return nil, fmt.Errorf("error calling OpenAI API: %w", err)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
	content := resp.Choices[0].Message.Content
	g.logger.Debug("OpenAI response", zap.String("content", content))

	// –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
	jsonStart := strings.Index(content, "{")
	jsonEnd := strings.LastIndex(content, "}")
	if jsonStart == -1 || jsonEnd == -1 || jsonEnd <= jsonStart {
		return nil, fmt.Errorf("no valid JSON found in the response: %s", content)
	}

	jsonContent := content[jsonStart : jsonEnd+1]

	var recipe Recipe
	if err := json.Unmarshal([]byte(jsonContent), &recipe); err != nil {
		return nil, fmt.Errorf("error parsing JSON from response: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
	if recipe.Title == "" || len(recipe.Ingredients) == 0 || recipe.Instructions == "" {
		return nil, fmt.Errorf("invalid recipe data returned from API")
	}

	return &recipe, nil
}

// FormatRecipe —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (g *RecipeGenerator) FormatRecipe(recipe *Recipe) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("üç≥ *%s*\n\n", recipe.Title))

	sb.WriteString("*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n")
	for i, ingredient := range recipe.Ingredients {
		sb.WriteString(fmt.Sprintf("%d. %s\n", i+1, ingredient))
	}

	sb.WriteString("\n*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:*\n")
	sb.WriteString(recipe.Instructions)

	return sb.String()
}
