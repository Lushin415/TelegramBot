package bot

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"

	"github.com/TelegramBot/recipe-recognition-bot/internal/database"
	dbmodels "github.com/TelegramBot/recipe-recognition-bot/internal/database/generated"
	"github.com/TelegramBot/recipe-recognition-bot/internal/recipes"
	"github.com/TelegramBot/recipe-recognition-bot/internal/vision"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
type Bot struct {
	api             *tgbotapi.BotAPI
	logger          *zap.Logger
	dbManager       *database.DBManager
	visionService   *vision.OpenAIVision
	recipeGenerator *recipes.RecipeGenerator
	maxRecipes      int
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token string, logger *zap.Logger, dbManager *database.DBManager,
	visionService *vision.OpenAIVision, recipeGenerator *recipes.RecipeGenerator,
	maxRecipes int) (*Bot, error) {

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create BotAPI: %w", err)
	}

	return &Bot{
		api:             bot,
		logger:          logger,
		dbManager:       dbManager,
		visionService:   visionService,
		recipeGenerator: recipeGenerator,
		maxRecipes:      maxRecipes,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start(ctx context.Context) error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
	b.api.Request(tgbotapi.NewSetMyCommands(
		tgbotapi.BotCommand{Command: "start", Description: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
		tgbotapi.BotCommand{Command: "help", Description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"},
		tgbotapi.BotCommand{Command: "recipes", Description: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"},
	))

	updates := b.api.GetUpdatesChan(u)

	b.logger.Info("Bot started")

	for {
		select {
		case <-ctx.Done():
			return nil
		case update := <-updates:
			go b.handleUpdate(ctx, update)
		}
	}
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleUpdate(ctx context.Context, update tgbotapi.Update) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if update.Message != nil && update.Message.IsCommand() {
		cmd := update.Message.Command()
		switch cmd {
		case "start":
			b.handleStartCommand(ctx, update)
		case "help":
			b.handleHelpCommand(ctx, update)
		case "recipes":
			b.handleRecipesCommand(ctx, update)
		default:
			b.handleUnknownCommand(ctx, update)
		}
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
	if update.Message != nil && update.Message.Photo != nil {
		b.handlePhotoMessage(ctx, update)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
	if update.CallbackQuery != nil {
		b.handleCallbackQuery(ctx, update)
		return
	}

	// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message != nil && update.Message.Text != "" {
		switch update.Message.Text {
		case "–ü–æ–º–æ—â—å":
			b.handleHelpCommand(ctx, update)
		case "–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã":
			b.handleRecipesCommand(ctx, update)
		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã (/help).")
			b.api.Send(msg)
		}
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(ctx context.Context, update tgbotapi.Update) {
	user := update.Message.From
	chatID := update.Message.Chat.ID

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	b.dbManager.GetUserOrCreate(ctx, user.ID, user.UserName, user.FirstName, user.LastName)

	welcomeText := fmt.Sprintf(
		"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s!\n\n"+
			"–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n\n"+
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ—Ü–µ–ø—Ç.\n\n"+
			"–ö–æ–º–∞–Ω–¥—ã:\n"+
			"/help - —Å–ø—Ä–∞–≤–∫–∞\n"+
			"/recipes - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã",
		user.FirstName,
	)

	msg := tgbotapi.NewMessage(chatID, welcomeText)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–º–æ—â—å"),
			tgbotapi.NewKeyboardButton("–ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã"),
		),
	)

	b.api.Send(msg)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelpCommand(ctx context.Context, update tgbotapi.Update) {
	helpText := `*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
2. –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã 
3. –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ä–µ—Ü–µ–ø—Ç
4. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —Å–ø—Ä–∞–≤–∫–∞
/recipes - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã`

	var msg tgbotapi.MessageConfig
	if update.CallbackQuery != nil {
		msg = tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, helpText)
		b.api.Request(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))
	} else {
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
	}

	msg.ParseMode = tgbotapi.ModeMarkdown
	b.api.Send(msg)
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleUnknownCommand(ctx context.Context, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	b.api.Send(msg)
}

// handleRecipesCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /recipes
func (b *Bot) handleRecipesCommand(ctx context.Context, update tgbotapi.Update) {
	var user *tgbotapi.User
	var chatID int64

	if update.CallbackQuery != nil {
		user = update.CallbackQuery.From
		chatID = update.CallbackQuery.Message.Chat.ID
		b.api.Request(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))
	} else {
		user = update.Message.From
		chatID = update.Message.Chat.ID
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
	dbUser, _ := b.dbManager.GetUserOrCreate(ctx, user.ID, user.UserName, user.FirstName, user.LastName)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
	recipes, err := b.dbManager.Queries.ListUserRecipes(ctx, dbmodels.ListUserRecipesParams{
		UserID: dbUser.ID,
		Limit:  int32(b.maxRecipes),
	})

	if err != nil || len(recipes) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤. "+
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç.")
		b.api.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, recipe := range recipes {
		button := tgbotapi.NewInlineKeyboardButtonData(
			recipe.RecipeTitle,
			fmt.Sprintf("recipe:%d", recipe.ID),
		)
		rows = append(rows, []tgbotapi.InlineKeyboardButton{button})
	}

	msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.api.Send(msg)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
func (b *Bot) handleCallbackQuery(ctx context.Context, update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	user := update.CallbackQuery.From

	// –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ü–µ–ø—Ç–∞
	if strings.HasPrefix(data, "recipe:") {
		recipeID, _ := strconv.Atoi(data[7:])
		dbUser, _ := b.dbManager.GetUserOrCreate(ctx, user.ID, user.UserName, user.FirstName, user.LastName)

		recipe, err := b.dbManager.Queries.GetRecipe(ctx, dbmodels.GetRecipeParams{
			ID:     int32(recipeID),
			UserID: dbUser.ID,
		})

		b.api.Request(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))

		if err != nil {
			errorMsg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç.")
			b.api.Send(errorMsg)
			return
		}

		recipeMsg := tgbotapi.NewMessage(chatID, recipe.RecipeContent)
		recipeMsg.ParseMode = tgbotapi.ModeMarkdown
		recipeMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete:%d", recipe.ID)),
				tgbotapi.NewInlineKeyboardButtonData("¬´ –ù–∞–∑–∞–¥", "list_recipes"),
			),
		)

		b.api.Send(recipeMsg)
		return
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
	if strings.HasPrefix(data, "delete:") {
		recipeID, _ := strconv.Atoi(data[7:])
		dbUser, _ := b.dbManager.GetUserOrCreate(ctx, user.ID, user.UserName, user.FirstName, user.LastName)

		b.dbManager.Queries.DeleteRecipe(ctx, dbmodels.DeleteRecipeParams{
			ID:     int32(recipeID),
			UserID: dbUser.ID,
		})

		b.api.Request(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))
		b.api.Request(tgbotapi.NewDeleteMessage(chatID, update.CallbackQuery.Message.MessageID))

		confirmMsg := tgbotapi.NewMessage(chatID, "–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /recipes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.")
		b.api.Send(confirmMsg)
		return
	}

	// –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
	if data == "list_recipes" {
		b.handleRecipesCommand(ctx, update)
	}
}

// handlePhotoMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
func (b *Bot) handlePhotoMessage(ctx context.Context, update tgbotapi.Update) {
	user := update.Message.From
	chatID := update.Message.Chat.ID

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	dbUser, _ := b.dbManager.GetUserOrCreate(ctx, user.ID, user.UserName, user.FirstName, user.LastName)

	// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
	processingMsg := tgbotapi.NewMessage(chatID, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
	sentMsg, _ := b.api.Send(processingMsg)

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
	photos := update.Message.Photo
	fileID := photos[len(photos)-1].FileID
	fileURL, err := b.api.GetFileDirectURL(fileID)

	if err != nil {
		errMsg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		b.api.Send(errMsg)
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	photoResp, err := http.Get(fileURL)
	if err != nil {
		errMsg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
		b.api.Send(errMsg)
		return
	}
	defer photoResp.Body.Close()

	photoData, _ := io.ReadAll(photoResp.Body)

	// –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
	recognizedItems, err := b.visionService.RecognizeProductsFromImage(ctx, bytes.NewReader(photoData))
	if err != nil {
		errMsg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã. –°–¥–µ–ª–∞–π—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–π —Å–Ω–∏–º–æ–∫.")
		b.api.Send(errMsg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	itemsList := ""
	for i, item := range recognizedItems.Items {
		itemsList += fmt.Sprintf("%d. %s\n", i+1, item)
	}

	recognizedMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n%s\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç...", itemsList))
	b.api.Send(recognizedMsg)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
	recipe, err := b.recipeGenerator.GenerateRecipe(ctx, recognizedItems.Items)
	if err != nil {
		errMsg := tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		b.api.Send(errMsg)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç
	formattedRecipe := b.recipeGenerator.FormatRecipe(recipe)
	ingredientsJSON, _ := json.Marshal(recipe.Ingredients)

	b.dbManager.Queries.SaveRecipe(ctx, dbmodels.SaveRecipeParams{
		UserID:        dbUser.ID,
		RecipeTitle:   recipe.Title,
		RecipeContent: formattedRecipe,
		Ingredients:   ingredientsJSON,
	})

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç
	recipeMsg := tgbotapi.NewMessage(chatID, formattedRecipe)
	recipeMsg.ParseMode = tgbotapi.ModeMarkdown

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
	b.api.Request(tgbotapi.NewDeleteMessage(chatID, sentMsg.MessageID))
	b.api.Send(recipeMsg)
}
